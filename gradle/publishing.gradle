ext.set('signing.keyId', project.findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY'))
ext.set('signing.password', project.findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE'))
ext.set('signing.secretKeyRingFile', project.findProperty('signing.secretKeyRingFile') ?: "${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg")

def javaComponent = components.named('java')
project.extensions.configure(PublishingExtension) { PublishingExtension pe ->

    // 'java-gradle-plugin' in views-gradle has already created this publication
    if (!pe.publications.names.contains('pluginMaven')) {
        pe.publications.register('pluginMaven', MavenPublication)
    }
    pe.publications.named('pluginMaven', MavenPublication) {
        artifactId = project.name
        // 'java-gradle-plugin' in views-gradle has already configured this
        if (project.name != 'views-gradle') {
            from javaComponent.get()
        }
        versionMapping {
            usage('java-api') { fromResolutionOf('runtimeClasspath') }
            usage('java-runtime') { fromResolutionResult() }
        }
        pom {
            name = 'Grails Views'
            description = 'Provides additional view technologies to the Grails framework, including JSON and Markup views.'
        }
        pom.withXml {
            def pomNode = asNode()
            pomNode.children().last() + pomInfo

            // dependency management shouldn't be included
            try { pomNode.dependencyManagement.replaceNode({}) } catch (Throwable ignore) {}
        }
    }

    if (isSnapshot) {
        repositories {
            maven {
                credentials {
                    username = project.findProperty('artifactoryUsername')
                    password = project.findProperty('artifactoryPassword')
                }
                url = group == 'org.grails.plugins' ?
                        uri('https://repo.grails.org/grails/plugins3-snapshots-local') :
                        uri('https://repo.grails.org/grails/libs-snapshots-local')
            }
        }
    }
}

afterEvaluate {
    def publicationContainer = extensions.findByType(PublishingExtension).publications
    extensions.configure(SigningExtension) { SigningExtension se ->
        se.required = { isReleaseVersion && gradle.taskGraph.hasTask('publish') }
        def publicationsToSign = publicationContainer.stream().filter { it.name == 'pluginMaven' }.toArray(Publication[]::new)
        se.sign(publicationsToSign)
    }
}

tasks.withType(Sign).configureEach {
    onlyIf { isReleaseVersion }
}

tasks.register('install') {
    dependsOn 'publishToMavenLocal'
}