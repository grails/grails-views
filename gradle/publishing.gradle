def javaComponent = components.named('java')

publishing {
    publications {
        pluginMaven(MavenPublication) {
            artifactId = project.name
            if (project.name != 'views-gradle') {
                from javaComponent.get()
            }
            versionMapping {
                usage('java-api') { fromResolutionOf('runtimeClasspath') }
                usage('java-runtime') { fromResolutionResult() }
            }
            if (ext.has('isGrailsPlugin')) {
                artifact source: "${project.sourceSets.main.groovy.classesDirectory.getAsFile().get()}/META-INF/grails-plugin.xml",
                        classifier: "plugin",
                        extension: 'xml'
            }
            pom {
                name = 'Grails Views'
                description = 'Provides additional view technologies to the Grails framework, including JSON and Markup views.'
            }
            pom.withXml {
                def pomNode = asNode()
                pomNode.children().last() + pomInfo
                // dependency management shouldn't be included
                try {
                    pomNode.dependencyManagement.replaceNode({})
                } catch (Throwable ignore) {
                }
            }
        }
    }

    if (isSnapshot) {
        repositories {
            maven {
                credentials {
                    username = project.findProperty('artifactoryUsername')
                    password = project.findProperty('artifactoryPassword')
                }
                url = group == 'org.grails.plugins' ?
                        uri('https://repo.grails.org/grails/plugins3-snapshots-local') :
                        uri('https://repo.grails.org/grails/libs-snapshots-local')
            }
        }
    }
}

afterEvaluate {
    signing {
        required = { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        Publication[] publications = new Publication[project.publishing.publications.size()]
        project.publishing.publications.findAll().toArray(publications)
        sign(publications)
    }

    tasks.withType(Sign) {
        onlyIf { isReleaseVersion }
    }
}

tasks.register('install') {
    dependsOn 'publishToMavenLocal'
}