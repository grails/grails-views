buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:views-gradle:$viewsGradleVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
    }
}

version "0.1"
group "functional.tests"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "war"
apply plugin: "com.bertramlabs.asset-pipeline"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"

// uncommenting fails because we have functional tests for compilation errors
//apply plugin: "org.grails.plugins.views-json"
//apply plugin: "org.grails.plugins.views-markup"

assets {
    minifyJs = true
    minifyCss = true
}

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.grails' &&
                details.requested.name.startsWith('grails-datastore')) {

            if (details.requested.name.equals("grails-datastore-gorm-hibernate5")) {
                details.useVersion("$hibernateGormVersion")
            } else if (details.requested.name.startsWith("grails-datastore-gorm-mongodb") ||
                    details.requested.name.equals("grails-datastore-gorm-bson")) {
                details.useVersion("$mongodbVersion")
            } else {
                details.useVersion("$gormVersion")
            }
        } else if (details.requested.group == 'org.mongodb' && details.requested.module.name != 'mongodb-driver-rx') {
            details.useVersion(mongodbDriverVersion)
        } else if (details.requested.group == 'org.grails.plugins') {
            if (details.requested.name == 'hibernate5') {
                details.useVersion(hibernateGormVersion)
            } else if (details.requested.name == 'mongodb') {
                details.useVersion(mongodbVersion)
            }
        }

    }
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


dependencies {
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-dependencies"
    implementation "org.grails:grails-web-boot"

    implementation "org.grails.plugins:hibernate5"
    implementation "org.grails.plugins:mongodb"
    implementation "org.grails.plugins:cache"
    implementation "org.hibernate:hibernate-ehcache"
    implementation "org.grails.plugins:scaffolding"

    implementation project(":views-json")
    implementation project(":views-markup")
    implementation project(":examples-functional-tests-plugin")

    runtimeOnly "org.apache.tomcat:tomcat-jdbc:9.0.13"
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
    runtimeOnly project(":views-json-templates")

    testImplementation project(":views-json-testing-support")

    testImplementation "io.micronaut:micronaut-http-client:$micronautVersion"
}

integrationTest {
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}
