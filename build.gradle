import io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository

plugins {
    id 'groovy'
    id 'io.github.gradle-nexus.publish-plugin'
    id 'org.asciidoctor.jvm.convert'
}

version = projectVersion
ext.set('grailsVersion', libs.versions.grails.asProvider().get())
ext.set('isSnapshot', version.endsWith('-SNAPSHOT'))
ext.set('isReleaseVersion', !isSnapshot)
ext.set('pomInfo', {
    delegate.url 'https://views.grails.org/latest/'
    delegate.licenses {
        delegate.license {
            delegate.name 'The Apache Software License, Version 2.0'
            delegate.url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    delegate.scm {
        delegate.url 'https://github.com/grails/grails-views/'
        delegate.connection 'scm:git:git://github.com/grails/grails-views'
        delegate.developerConnection 'scm:git:ssh://github.com:grails/grails-views'
    }
    delegate.developers {
        delegate.developer {
            delegate.id 'graemerocher'
            delegate.name 'Graeme Rocher'
            delegate.email 'graeme.rocher@gmail.com'
        }
        delegate.developer {
            delegate.id 'puneetbehl'
            delegate.name 'Puneet Behl'
            delegate.email 'behlp@unityfoundation.io'
        }
    }
})

allprojects {
    version = rootProject.version
    repositories {
        mavenLocal() // Used by Groovy Joint workflow github action after building Groovy
        mavenCentral()
        maven { url = 'https://repo.grails.org/grails/core' }
        if (libs.versions.groovy.get().endsWith('-SNAPSHOT')) {
            maven {
                name = 'JFrog Groovy snapshot repo'
                url = 'https://groovy.jfrog.io/artifactory/libs-snapshot-local'
            }
        }
    }
    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        testLogging { events 'passed', 'skipped', 'failed', 'standardOut', 'standardError' }
    }
    tasks.withType(Jar).configureEach {
        manifest.attributes(
                'Built-By': System.properties['user.name'],
                'Created-By': System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
                'Implementation-Title': project.findProperty('projectDesc') ?: 'Grails Views',
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'grails.org'
        )
    }
}

if (isReleaseVersion) {
    nexusPublishing {
        String ossUser = project.findProperty('sonatypeOssUsername') ?: ''
        String ossPass = project.findProperty('sonatypeOssPassword') ?: ''
        String ossStagingProfileId = project.findProperty('sonatypeOssStagingProfileId') ?: ''
        String ossRepo = project.findProperty('sonatypeOssRepo') ?: ''
        repositories {
            sonatype {
                nexusUrl = uri(ossRepo)
                username = ossUser
                password = ossPass
                stagingProfileId = ossStagingProfileId
            }
        }
    }
}

// Do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(InitializeNexusStagingRepository).configureEach {
    shouldRunAfter = tasks.withType(Sign)
}