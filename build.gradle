buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:1.3.0"
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.gradle:test-retry-gradle-plugin:1.4.0"
    }
}

ext {
    isReleaseVersion = !project.projectVersion.endsWith('-SNAPSHOT')
    grailsVersion = project.grailsVersion
    userOrg = "grails"
}

apply plugin:'idea'

if (isReleaseVersion) {
    apply plugin: 'maven-publish'
    apply plugin: "io.github.gradle-nexus.publish-plugin"

    nexusPublishing {
        repositories {
            sonatype {
                def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
                def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
                def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
                nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
                username = ossUser
                password = ossPass
                stagingProfileId = ossStagingProfileId
            }
        }
    }
}

subprojects { subproject->

    version subproject.projectVersion

    subproject.configurations {
        all {
            resolutionStrategy {
                force 'org.yaml:snakeyaml:1.33'
                force 'org.codehaus.groovy:groovy-xml:3.0.13'
                force 'org.codehaus.groovy:groovy-sql:3.0.13'

                eachDependency { DependencyResolveDetails details ->
                    if (details.requested.group == 'org.codehaus.groovy' &&
                            !(details.requested.name in ['groovy-xml', 'groovy-sql'])) {
                        details.useVersion(groovyVersion)
                    }
                }
            }
        }
    }

    if (subproject.name.startsWith('examples') || subproject.name.endsWith('docs')) {
        return
    }

    ext.isGrailsPlugin = subproject.name in ['views-markup', 'views-json']

    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: "org.gradle.test-retry"

    if (ext.isGrailsPlugin) {
        apply plugin: "org.grails.grails-plugin"
    }

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }

    apply from: '../publishing/grailsCentralPublishing.gradle'


    if (subproject.name in ["views-core", "views-json", "views-markup", "views-json-testing-support"]) {

        configurations {
            documentation
        }

        dependencies {
            documentation "org.fusesource.jansi:jansi:$jansiVersion"
            documentation "org.codehaus.groovy:groovy-dateutil:$groovyVersion"
            documentation "info.picocli:picocli:4.6.3"
            documentation "com.github.javaparser:javaparser-core:$javaParserCoreVersion"

            testImplementation "org.spockframework:spock-core:$spockVersion"
            testImplementation "org.codehaus.groovy:groovy-test-junit5:${groovyVersion}"
            testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.3"
            testImplementation "org.junit.platform:junit-platform-runner:1.9.3"
            testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.9.3"
        }

        tasks.withType(Test) {
            useJUnitPlatform()
            testLogging {
                showStandardStreams = true
                exceptionFormat = 'full'
            }
            configure {
                retry {
                    maxRetries = 2
                    maxFailures = 20
                    failOnPassedAfterRetry = true
                }
            }
        }

        groovydoc.classpath = configurations.documentation
    }

}
