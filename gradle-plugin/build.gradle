plugins {
	id 'java-gradle-plugin'
	id 'groovy'
	id 'maven-publish'
	id 'signing'
}

group = 'org.grails.plugins'
ext.set('projectDesc', 'Grails Views Gradle Plugin')

dependencies {
	implementation libs.grails.bootstrap
	implementation libs.grails.gradle.plugin
	implementation libs.groovy.core
	implementation libs.spring.boot.gradle.plugin

	// This is a workaround for grails-bootstrap exposing a
	// different version of groovy-xml than the one used by Gradle.
	// This causes issues with the Groovy compiler.
	compileOnly "org.codehaus.groovy:groovy-xml:$GroovySystem.version"
}

gradlePlugin {
	plugins {
		create('viewsJson') {
			id = 'org.grails.plugins.views-json'
			implementationClass = 'grails.views.gradle.json.GrailsJsonViewsPlugin'
			displayName = 'Grails Json Views Gradle Plugin'
			description = 'The Gradle plugin for Json Views'
		}
		create('viewsMarkup') {
			id = 'org.grails.plugins.views-markup'
			implementationClass = 'grails.views.gradle.markup.GrailsMarkupViewsPlugin'
			displayName = 'Grails Markup Views Gradle Plugin'
			description = 'The Gradle plugin for Markup Views'
		}
	}
}

// Signing and publishing for this project is handled
// separately as it is using the java-gradle-plugin
afterEvaluate {
	def publications = extensions.findByType(PublishingExtension).publications
	signing {
		required = { isReleaseVersion && gradle.taskGraph.hasTask('publish') }
		sign(publications.withType(MavenPublication))
	}
	// Modify the 'pluginMaven' publication that is already
	// set up by the java-gradle-plugin for the java components
	publications.named('pluginMaven', MavenPublication) {
		artifactId = project.name
		versionMapping {
			usage('java-api') { fromResolutionOf('runtimeClasspath') }
			usage('java-runtime') { fromResolutionResult() }
		}
		pom {
			name = 'Grails Views'
			description = 'Provides additional view technologies to the Grails framework, including JSON and Markup views.'
		}
	}
	// Add our pom info to all publications
	// (e.g. also to the plugin marker poms)
	publications.withType(MavenPublication).each {
		it.pom.withXml {
			asNode().children().last() + pomInfo
		}
	}
}

apply from: rootProject.layout.projectDirectory.file('gradle/java-config.gradle')
apply from: rootProject.layout.projectDirectory.file('gradle/api-docs-config.gradle')