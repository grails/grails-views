plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven-publish'
    id 'signing'
}

group = 'org.grails.plugins'
ext.set('projectDesc', 'Grails Views Gradle Plugin')

dependencies {

    // the gradle api is provided by java-gradle-plugin

    implementation libs.grails.bootstrap, {
        // grails-bootstrap leaks groovy-xml which is a problem for Gradle (version conflict)
        exclude group: 'org.codehaus.groovy', module: 'groovy-xml'
    }
    implementation libs.grails.gradle.plugin
    implementation libs.spring.boot.gradle.plugin

    compileOnly libs.groovy.core // @CompileStatic
}

gradlePlugin {
    plugins {
        create('viewsJson') {
            id = 'org.grails.plugins.views-json'
            implementationClass = 'grails.views.gradle.json.GrailsJsonViewsPlugin'
            displayName = 'Grails Json Views Gradle Plugin'
            description = 'The Gradle plugin for Json Views'
        }
        create('viewsMarkup') {
            id = 'org.grails.plugins.views-markup'
            implementationClass = 'grails.views.gradle.markup.GrailsMarkupViewsPlugin'
            displayName = 'Grails Markup Views Gradle Plugin'
            description = 'The Gradle plugin for Markup Views'
        }
    }
}

// Publishing for this project is handled
// separately as it is using the java-gradle-plugin
afterEvaluate {
    publishing.publications.each { MavenPublication publication ->
        if (publication.name != "pluginMaven") {
            publication.pom.withXml {
                def xml = asNode()
                xml.children().last() + pomInfo
            }
        }
    }
}

apply from: rootProject.layout.projectDirectory.file('gradle/java-config.gradle')
apply from: rootProject.layout.projectDirectory.file('gradle/api-docs-config.gradle')
apply from: rootProject.layout.projectDirectory.file('gradle/publishing.gradle')