plugins {
	id 'java-gradle-plugin'
	id 'groovy'
	id 'maven-publish'
	id 'signing'
}

group = 'org.grails.plugins'
ext.set('projectDesc', 'Grails Views Gradle Plugin')

dependencies {
	implementation libs.grails.bootstrap
	implementation libs.grails.gradle.plugin
	implementation libs.groovy.core
	implementation libs.spring.boot.gradle.plugin

	// This is a workaround for grails-bootstrap exposing a
	// different version of groovy-xml than the one used by Gradle.
	// This causes issues with the Groovy compiler.
	compileOnly "org.codehaus.groovy:groovy-xml:$GroovySystem.version"
}

java {
	sourceCompatibility = JavaVersion.toVersion(libs.versions.java.baseline.get())
	withJavadocJar()
	withSourcesJar()
}

tasks.named('javadocJar', Jar) {
	from tasks.named('groovydoc')
}

tasks.withType(Sign).configureEach {
	onlyIf { isReleaseVersion }
}

gradlePlugin {
	plugins {
		register('viewsJson') {
			id = 'org.grails.plugins.views-json'
			implementationClass = 'grails.views.gradle.json.GrailsJsonViewsPlugin'
			displayName = 'Grails Json Views Gradle Plugin'
			description = 'The Gradle plugin for Json Views'
		}
		register('viewsMarkup') {
			id = 'org.grails.plugins.views-markup'
			implementationClass = 'grails.views.gradle.markup.GrailsMarkupViewsPlugin'
			displayName = 'Grails Markup Views Gradle Plugin'
			description = 'The Gradle plugin for Markup Views'
		}
	}
}

afterEvaluate {
	signing {
		def publicationContainer = project.extensions.findByType(PublishingExtension).publications
		required = { isReleaseVersion && gradle.taskGraph.hasTask('publish') }
		Publication[] publicationsToSign = new Publication[publicationContainer.size() - 1]
		publicationContainer.findAll { it.name != 'pluginMaven' }.toArray(publicationsToSign)
		sign(publicationsToSign)
	}

	publishing.publications.each { publication ->
		MavenPublication pub = publication as MavenPublication
		if (pub.name != 'pluginMaven') {
			pub.pom.withXml {
				def xml = asNode()
				xml.children().last() + pomInfo
			}
		}
	}
}