plugins {
	id 'java-gradle-plugin'
	id 'groovy'
	id 'maven-publish'
	id 'signing'
}

group = 'org.grails.plugins'
ext.set('projectDesc', 'Grails Views Gradle Plugin')

dependencies {
	implementation libs.grails.bootstrap
	implementation libs.grails.gradle.plugin
	implementation libs.groovy.core
	implementation libs.spring.boot.gradle.plugin

	// This is a workaround for grails-bootstrap exposing a
	// different version of groovy-xml than the one used by Gradle.
	// This causes issues with the Groovy compiler.
	compileOnly "org.codehaus.groovy:groovy-xml:$GroovySystem.version"
}

gradlePlugin {
	plugins {
		create('viewsJson') {
			id = 'org.grails.plugins.views-json'
			implementationClass = 'grails.views.gradle.json.GrailsJsonViewsPlugin'
			displayName = 'Grails Json Views Gradle Plugin'
			description = 'The Gradle plugin for Json Views'
		}
		create('viewsMarkup') {
			id = 'org.grails.plugins.views-markup'
			implementationClass = 'grails.views.gradle.markup.GrailsMarkupViewsPlugin'
			displayName = 'Grails Markup Views Gradle Plugin'
			description = 'The Gradle plugin for Markup Views'
		}
	}
}

// This is for signing and publishing the Gradle Plugin Marker poms
afterEvaluate {
	signing {
		required = { isReleaseVersion && gradle.taskGraph.hasTask('publish') }
		def publicationContainer = project.extensions.findByType(PublishingExtension).publications
		def publicationsToSign = publicationContainer.stream().filter { it.name != 'pluginMaven' }.toArray(Publication[]::new)
		sign(publicationsToSign)
	}
	publishing.publications.each { publication ->
		def pub = publication as MavenPublication
		if (pub.name != 'pluginMaven') {
			pub.pom.withXml {
				def xml = asNode()
				xml.children().last() + pomInfo
			}
		}
	}
}

apply from: rootProject.layout.projectDirectory.file('gradle/java-config.gradle')
apply from: rootProject.layout.projectDirectory.file('gradle/api-docs-config.gradle')
apply from: rootProject.layout.projectDirectory.file('gradle/publishing.gradle')